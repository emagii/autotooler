#!/bin/sh

toupper ()
{
	echo $1 | tr '[:lower:]' '[:upper:]'
}

# Ease up on git use.
add_credentials ()
{
	git config credential.helper 'cache --timeout=36000'
}

get_repo ()
{
	git clone	https://www.github.com/emagii/autotooler.git	"$1"
}

add_config_string ()
{
	printf	"CONFIG_%s=\"%s\"\n"	"$1" "$2"	>>	${CONFIG}
}

add_config_yes ()
{
	printf	"CONFIG_%s=y\n"	"$1"			>>	${CONFIG}
}

raw ()
{
	echo	"$1"	>>	${CONFIG}
}

purge ()
{
	rm	-f *~
}

get_repo ()
{
	REPO=""
	for f in $(ls -1) ; do
		if [ -d "$f" ] ; then
			if [ -d "$f/.git" ] ; then
				REPO="$f"
				break;
			fi
		else
			continue;
		fi
	done
	if [ "x$REPO" == "x" ] ; then
		echo	"Did not find a git repo, exiting"
		exit	1
	fi
}

# Add the autotooler subdirectory to target and delete any config files
init_repo_autotooler ()
{
	echo init_repo_autotooler
	if	[ -d $REPO/autotooler ] ; then
		echo	"$REPO contains autotooler subdir"
		DEFCONFIG=$(cd $REPO/autotooler ; find . -name '*_defconfig')
	else
		echo	"Adding autotooler subdir to $REPO and syncing"
		mkdir	-p	$REPO/autotooler
		rsync	-av	"autotooler/user/"	"$REPO/autotooler"
		find "$REPO/autotooler" -name '*_defconfig' | xargs /bin/rm
		DEFCONFIG=""
	fi
}

pkg_config_file ()
{
	PKG_FILE=$REPO.pc.in
	if ! [ -f $PKG_FILE ] ; then
		touch	$PKG_FILE
		printf	"prefix=@prefix@\n"				>> $PKG_FILE
		printf	"exec_prefix=@exec_prefix@\n"			>> $PKG_FILE
		printf	"libdir=@libdir@\n"				>> $PKG_FILE
		printf	"includedir=@includedir@\n"			>> $PKG_FILE
		printf	"Name: %s\n"				$REPO	>> $PKG_FILE
		printf	"URL: %s/%s\n"	$SRC_URI		$REPO	>> $PKG_FILE
		printf	"Description: <TBD>\n"				>> $PKG_FILE
		printf	"Version: @%s_VERSION@\n"	$(toupper $REPO)>> $PKG_FILE
		printf	"Libs:	-L\${libdir} -l%s\n"	${REPO#lib}	>> $PKG_FILE
		printf	"Libs.private: @%s_LIBS@\n" 	$(toupper $REPO)>> $PKG_FILE
		printf	"Cflags: -I\${includedir}\n"			>> $PKG_FILE
	fi
}

init_repo ()
{
	echo init_repo
	pushd	$REPO		&>/dev/null
	add_credentials

	mkdir	-p		m4
	mkdir	-p		src/include
	touch			src/include/config.h.in
	pkg_config_file


	if	! [ -f AUTHORS ] ; then
		printf	"AUTHOR: %s <%s>\n"	"${AUTHOR}" "<${EMAIL}>"	>	AUTHORS
	fi
	if ! [ -f autogen.sh ] ; then
		install	-m 755 ../autotooler/scripts/autogen.sh	autogen.sh
		git	add	autogen.sh
		git	commit	-m "Adding autogen.sh" -s
	fi
	if	! [ -f AUTHORS ] ; then
		printf	"AUTHOR: %s <%s>\n"	"${AUTHOR}" "<${EMAIL}>"	>	AUTHORS
	fi
	touch			ChangeLog
	touch			COPYING
	touch			INSTALL
	touch			LICENSE
	touch			NEWS
	touch			README.md
	ls -l autotooler

	git	add	AUTHORS	COPYING	ChangeLog	INSTALL	LICENSE	NEWS	README.md
	git	commit	-m "Autotools required files" -s
	if	! [ -f .gitignore ] ; then
		cp	autotooler/gitignore	.gitignore
		git	add	.gitignore
		git	commit -m ".gitignore" -s
	fi

	if [ "1" == "0" ] ; then
		echo	"#!/bin/sh"					>	test-configure.sh
		echo	"PREFIX=/usr/local/$REPO"			>>	test-configure.sh
		echo	"sudo	mkdir			\${PREFIX}"	>>	test-configure.sh
		echo	"sudo	chown	\$USER:\$USER	\${PREFIX}"	>>	test-configure.sh
		echo	"./configure		--prefix=\${PREFIX}"	>>	test-configure.sh
		chmod	a+x							test-configure.sh
		git	add	test-configure.sh
		git	commit	-m "test-configure.sh ./configure test" -s
	fi

	git	add	autotooler
	git	commit	-m "autotooler default configuration (empty)" -s

	git	add	$REPO.pc.in
	git	commit	-m "$REPO.pc.in" -s
	popd				&>/dev/null
}

relink	()
{
	if [ -L "$2" ] ; then
		echo unlinking "$2"
		unlink "$2"
	fi
	ln	-sf 	"$1"	"$2"
}

init_links ()
{
	echo init_links
	pushd	autotooler		&>/dev/null
	relink	"../$REPO"	REPO
	popd				&>/dev/null

	pushd	autotooler/src		&>/dev/null
	relink	"../../$REPO/autotooler"	"user"
	relink	"../../$REPO"			"REPO"
	popd				&>/dev/null
}

init_config ()
{
	echo init_config
	pushd	autotooler		&>/dev/null
	CONFIG=.config
	raw						"HAVE_DOT_CONFIG=y"
	add_config_string	PROJECT			"$REPO"
	add_config_string	SRC_URI_HOST		"${SRC_URI}"
	add_config_string	SRC_URI_REPO		""
	add_config_string	WORKDIR			"${WORKDIR}"
	add_config_string	PROJECT_TYPE		"library"
	add_config_yes		SHARED_LIB	
	add_config_yes		LIBRARY

	add_config_string	LIBRARY_NAME		"$REPO"
	add_config_string	LIBRARY_VERSION		"1.0"
	add_config_string	COPYRIGHT_DATE		"2021"
	add_config_string	AUTHOR			"${AUTHOR}"
	add_config_string	AUTHOR_EMAIL		"${EMAIL}"
	add_config_string	HOMEPAGE		"${HOMEPAGE}"
	add_config_string	AC_PRERQ		"2.59"
	add_config_string	AC_CONFIG_HEADER	"src/include/config.h"
	add_config_string	AC_CONFIG_MACRO_DIR	"m4"
	add_config_string	AM_INIT_AUTOMAKE	"1.10 -Wall no-define"
	add_config_string	SRCDIR			"src"

	add_config_yes		OS_LINUX
	popd				&>/dev/null
}

purge
source	./config.inc
add_credentials
get_repo	"$1"

echo	"Autotooling $REPO"
init_repo_autotooler
init_repo
init_links
if [ "x$DEFCONFIG" == "x" ] ; then
	init_config
fi


